import os
import re
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command, CommandObject
from dotenv import load_dotenv
# from config import TOKEN
import openai

# token=TOKEN
load_dotenv()
openai.api_key = os.getenv('OPENAI_API_KEY')
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher()


# @dp.message(CommandStart())
# async def cmd_start(message: Message):
#     await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å !')


# –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –ª–æ–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏ –¥–µ–ª–∞—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É: t.me/bot?start=123
# t.me/BobReviewBot?start=Maikl_Dudikov
@dp.message(CommandStart(deep_link=True))
async def cmd_start(message: Message, command: CommandObject):
    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name} ! –¢—ã –ø—Ä–∏—à–µ–ª –æ—Ç {command.args}.')
    await message.answer('–ù–∞–∂–º–∏ /help')


@dp.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–í—Å–µ –∫–æ–º–∞–Ω–¥—ã :\n/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n/get - –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å 1 –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º\n/get2 - –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏\n'
                         '/chat - –∑–∞–ø—Ä–æ—Å –∫ chatGPT\n\n'
                         '–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç :\nid - –≤—ã–¥–∞—Å—Ç —Ç–≤–æ—ë id\n–ü—Ä–∏–≤–µ—Ç - –≤—ã–¥–∞—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ\n–ø—Ä–∏–±—ã–ª—å - –ø–æ—Å—á–∏—Ç–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏')


# noinspection PyBroadException
@dp.message(Command('get2'))
async def cmd_get2(message: Message, command: CommandObject):
    if not command.args:
        await message.answer('–ê—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã')
        return
    try:
        value1, value2 = command.args.split(' ', maxsplit=1)
        await message.answer(f'–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É help —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º {value1} {value2}')
    except:
        await message.answer('–ë—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã')


@dp.message(Command('get'))
async def cmd_get(message: Message, command: CommandObject):
    await message.answer(f'–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É get —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º {command.args}')


@dp.message(F.text == '–ü—Ä–∏–≤–µ—Ç')
async def hello(message: Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞ ?')
    await message.answer('–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å ?')


@dp.message(F.text.startswith('id'))
async def get_id(message: Message):
    await message.answer(f'{message.from_user.first_name}, –í–∞—à ID: {message.from_user.id}')


@dp.message(Command('chat'))
async def cmd_help(message: Message):
    await message.answer(f'{message.from_user.first_name}, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å?\n'
                         f'–ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ —á–∞—Ç.\n(–Ω–∞–ø—Ä–∏–º–µ—Ä : —á–∞—Ç –∫–∞–∫ —Å–≤–∞—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—à–∫—É?)')


@dp.message(F.text.startswith('—á–∞—Ç '))
async def request_chatgpt(message: Message):
    user_input = message.text[4:].strip()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Ç " –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞

    if not user_input:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ '—á–∞—Ç ', –Ω–∞–ø—Ä–∏–º–µ—Ä: '—á–∞—Ç –∫–∞–∫ —Å–≤–∞—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—à–∫—É?'")
        return

    try:
        response = await asyncio.to_thread(openai.ChatCompletion.create,
            model="gpt-3.5-turbo", # –ù–æ–≤–∞—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ gpt-4-turbo)
            messages=[{"role": "user", "content": user_input}]
        )

        answer = response["choices"][0]["message"]["content"].strip()
        await message.answer(answer if answer else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç üòï")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT: {str(e)}")


# –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –≤ –ø—Ä–æ—á–µ–Ω—Ç–∞—Ö
@dp.message(F.text.startswith("–ø—Ä–∏–±—ã–ª—å"))
async def calculate_profit(message: Message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        numbers = re.findall(r"\d+\.?\d*", message.text)
        if len(numbers) < 2:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ :\n–ø—Ä–∏–±—ã–ª—å <—Ü–µ–Ω–∞_–ø–æ–∫—É–ø–∫–∏> <—Ü–µ–Ω–∞_–ø—Ä–æ–¥–∞–∂–∏>\n\n–ü—Ä–∏–º–µ—Ä : –ø—Ä–∏–±—ã–ª—å 1000 1200")
            return

        buy_price, sell_price = map(float, numbers[:2])

        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
        profit_percent = ((sell_price - buy_price) / buy_price) * 100

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result_text = f"üí∞ **–ü—Ä–∏–±—ã–ª—å** : {profit_percent:.2f}%"
        await message.answer(result_text, parse_mode="Markdown")

    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ : {e}")


# @dp.message()
# async def echo(message: Message):
#     await message.answer('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ...')


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    dp.startup.register(startup)
    await dp.start_polling(bot)


async def startup():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ...')


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
