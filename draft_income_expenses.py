import json
import os
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, types
from aiogram.types import FSInputFile
import asyncio

# YOUR_TELEGRAM_BOT_TOKEN
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
DATA_FILE = "finance_data.json"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
else:
    data = {"income": [], "expenses": []}


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏
@dp.message()
async def handle_transaction(message: types.Message):
    text = message.text.lower()
    
    if text.startswith("–¥–æ—Ö–æ–¥"):
        parts = text.split()
        if len(parts) >= 3:
            amount = int(parts[1])
            category = " ".join(parts[2:])
            data["income"].append({"amount" : amount, "category" : category})
            save_data()
            await message.reply(f"‚úÖ –î–æ—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'")
    
    elif text.startswith("—Ä–∞—Å—Ö–æ–¥"):
        parts = text.split()
        if len(parts) >= 3:
            amount = int(parts[1])
            category = " ".join(parts[2:])
            data["expenses"].append({"amount" : amount, "category" : category})
            save_data()
            await message.reply(f"‚ùå –†–∞—Å—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'")
    
    elif text == "–±–∞–ª–∞–Ω—Å":
        total_income = sum(item["amount"] for item in data["income"])
        total_expense = sum(item["amount"] for item in data["expenses"])
        balance = total_income - total_expense
        await message.reply(f"üìä –ë–∞–ª–∞–Ω—Å : {balance} ‚ÇΩ\n–î–æ—Ö–æ–¥—ã : {total_income} ‚ÇΩ\n–†–∞—Å—Ö–æ–¥—ã : {total_expense} ‚ÇΩ")
    
    elif text == "–≥—Ä–∞—Ñ–∏–∫":
        if not data["expenses"] and not data["income"]:
            await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
            return
        
        categories_income = {}
        for item in data["income"]:
            categories_income[item["category"]] = categories_income.get(item["category"], 0) + item["amount"]
        
        categories_expense = {}
        for item in data["expenses"]:
            categories_expense[item["category"]] = categories_expense.get(item["category"], 0) + item["amount"]
        
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        
        if categories_income:
            ax[0].pie(categories_income.values(), labels=categories_income.keys(), autopct='%1.1f%%', startangle=140)
            ax[0].set_title("–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        if categories_expense:
            ax[1].pie(categories_expense.values(), labels=categories_expense.keys(), autopct='%1.1f%%', startangle=140)
            ax[1].set_title("–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        plt.savefig("finance_chart.png")
        plt.close()
        
        # with open("finance_chart.png", "rb") as photo:
        #     await message.reply_photo(photo, caption="üìä –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")

        photo = FSInputFile("finance_chart.png")
        await message.answer_photo(photo, caption="üìä –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
    
    else:
        await message.reply("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã :\n- '–¥–æ—Ö–æ–¥ 5000 –∑–∞—Ä–ø–ª–∞—Ç–∞'\n- '—Ä–∞—Å—Ö–æ–¥ 1000 –µ–¥–∞'\n- '–±–∞–ª–∞–Ω—Å'\n- '–≥—Ä–∞—Ñ–∏–∫'")


async def main():
    dp.startup.register(startup)
    await dp.start_polling(bot)


async def startup():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ...')


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
