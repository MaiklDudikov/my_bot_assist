import logging
import re
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor

TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã)
data = {"income": [], "expenses": []}

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
pattern = re.compile(r"(\D+?)\s*(-?\d+)")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤)
@dp.message_handler()
async def add_transaction(message: Message):
    match = pattern.match(message.text)
    
    if not match:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Å—É–º–º–∞>\n–ü—Ä–∏–º–µ—Ä: –∑–∞—Ä–ø–ª–∞—Ç–∞ 5000 –∏–ª–∏ –µ–¥–∞ -1000")
        return

    category, amount = match.groups()
    amount = int(amount)

    if amount > 0:
        data["income"].append((category, amount))
    else:
        data["expenses"].append((category, amount))

    await message.reply(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {category} {amount} ‚ÇΩ")


# –ö–æ–º–∞–Ω–¥–∞ /balance - –≤—ã–≤–æ–¥–∏—Ç –±–∞–ª–∞–Ω—Å
@dp.message_handler(commands=["balance"])
async def show_balance(message: Message):
    total_income = sum(i[1] for i in data["income"])
    total_expenses = sum(e[1] for e in data["expenses"])
    balance = total_income + total_expenses  # –†–∞—Å—Ö–æ–¥—ã —Ö—Ä–∞–Ω—è—Ç—Å—è —Å –º–∏–Ω—É—Å–æ–º

    income_text = "\n".join([f"{i[0]}: {i[1]} ‚ÇΩ" for i in data["income"]]) or "–ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤"
    expenses_text = "\n".join([f"{e[0]}: {e[1]} ‚ÇΩ" for e in data["expenses"]]) or "–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤"

    text = (f"üí∞ **–ë–∞–ª–∞–Ω—Å**: {balance} ‚ÇΩ\n\n"
            f"üìà **–î–æ—Ö–æ–¥—ã:**\n{income_text}\n\n"
            f"üìâ **–†–∞—Å—Ö–æ–¥—ã:**\n{expenses_text}")

    await message.reply(text, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
